#include "../lib/ShaderAPI.h"
#include "../lib/Color.h"
#include "../lib/Math.h"
#include "../lib/Texture.h"

shader apTexture_1
[[ string help = "Read texture map" ]]
(
    TEXTURE_INPUTS,

    FLOAT("", "", s, 0.0, 
          int connectable = 0, int lockgeom = 0, string widget = "null"),
    FLOAT("", "", t, 0.0, 
          int connectable = 0, int lockgeom = 0, string widget = "null"),

    COLOR_ALPHA_OUTPUTS
)
{
    string wrapMode = "default";
    if (tileTex)
        wrapMode = "periodic";

    float inputS;
    float inputT;
    if (isconnected(inputManifold))
    {
        inputS = inputManifold.Q[0];
        inputT = inputManifold.Q[1];
    }
    else
    {
        inputS = s;
        inputT = t;
    }

    if (invertT)
        inputT = 1 - inputT;
    inputS *= scaleS * scaleGlobal;
    inputT *= scaleT * scaleGlobal;

    //TODO: optimization pass
        //TODO: test if texture exists
        //TODO: check how many channels in texture to read

    // OSL may support RGBA return
    //TODO: debug wrap
    resultRGBA.RGB = texture(filename, inputS, inputT,
                             "wrap", wrapMode,
                             "missingcolor", missingRGB);
    resultRGBA.A = texture(filename, inputS, inputT,
                           "wrap", wrapMode,
                           "firstchannel", 3,
                           "missingcolor", color(missingA));

    resultRGBA.RGB = RemapColor(resultRGBA.RGB, 
                                inputMin, inputMax,
                                outputMin, outputMax);

    COLOR_ALPHA_OUTPUTS_SET;
}